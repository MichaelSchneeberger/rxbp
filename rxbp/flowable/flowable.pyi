from abc import abstractmethod
from typing import Callable, Generator, override

from rxbp.state import State
from rxbp.flowabletree.observer import Observer
from rxbp.flowabletree.subscriptionresult import SubscriptionResult
from rxbp.flowabletree.nodes import SingleChildFlowableNode

class Flowable[U](SingleChildFlowableNode[U, U]):
    # used for the donotation.do notation
    def __iter__(self) -> Generator[None, None, U]: ...
    @abstractmethod
    def copy(self, /, **changes) -> Flowable[U]: ...
    def buffer(self) -> Flowable[U]: ...
    def flat_map[V](self, func: Callable[[U], Flowable[V]]) -> Flowable[V]: ...
    def map[V](self, func: Callable[[U], V]) -> Flowable[V]: ...
    def share(self) -> Flowable[U]: ...
    def run[V](
        self, connections: dict[ConnectableFlowable[V], Flowable[V]] | None = None,
    ) -> list[U]: ...
    @override
    def unsafe_subscribe(
        self, state: State, observer: Observer[U]
    ) -> tuple[State, SubscriptionResult]: ...

class ConnectableFlowable[V](Flowable[V]):
    # def connect(self, child: Flowable) -> Flowable: ...
    pass
