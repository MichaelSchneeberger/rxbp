from typing import Iterable

from continuationmonad.typing import Scheduler

from rxbp.flowable.flowable import Flowable, ConnectableFlowable

def connectable[V](id, init: V) -> ConnectableFlowable[V]: ...
def from_iterable[V](iterable: Iterable[V]) -> Flowable[V]: ...
def from_value[V](value: V) -> Flowable[V]: ...
def merge[V](observables: tuple[Flowable[V], ...]) -> Flowable[tuple[V, ...]]: ...
def schedule_on(scheduler: Scheduler) -> Flowable[Scheduler]: ...
def zip[V](observables: tuple[Flowable[V], ...]) -> Flowable[tuple[V, ...]]: ...
